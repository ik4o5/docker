.. _ding0-examples:

How to use ding0?
~~~~~~~~~~~~~~~~~

Examples
========

We provide two examples of how to use Ding0 along with two example for analysis
of resulting data. The
:download:`first example <../examples/example_single_grid_district.py>` shows how Ding0
is applied to a single medium-voltage grid district. Grid topology for the
medium- and low-voltage grid level is generated an export to the *OEDB* and
save to file (.pkl).
The :download:`analysis script <../examples/example_analyze_single_grid_district.py>`
takes data generated the first example and produces exemplary output: key
figures and plots.

The second example shows how to generate a larger number of grid topology data
sets.
As the current data source sometimes produces unuseful data or leads to program
execution interruption, these are excluded from grid topology generation. This
is enable by setting :code:`failsafe=` to `True`.
The according analysis script provides exemplary plots for data of multiple grid
districts.


High-level functions
====================

Run ding0
---------

Check out :meth:`~core.Network.run_ding0()` as high-level function which is also used the
:download:`example <../examples/example_single_grid_district.py>`.

For larger calculation (parallelization)
----------------------------------------

To generate data for a larger area consider to parallelize  execution of Ding0
using :func:`~.examples.example_multiple_grid_districts.run_multiple_grid_districts`.


Analysis of grid data
=====================

Export key figures
------------------

We provide a set of functions to export key figures of the generated data.
The following assumes a Ding0 network is available generated like

.. code-block:: python

    from egoio.tools import db
    from ding0.core import NetworkDing0

    conn = db.connection(section='oedb')

    network = NetworkDing0(name='network')
    network.run_ding0(
        conn=conn,
        mv_grid_districts_no=[3040])



Extract key information about medium and low voltage grid topology.

.. code-block:: python

    from ding0.tools.results import calculate_mvgd_stats

    # statistical key figures of medium voltage grid
    mv_stats = calculate_mvgd_stats(network)

    # statistical key figures of medium voltage grid
    lv_stats = calculate_lvgd_stats(network)

Information about power flows and voltage levels from final approving power flow
analysis can be obtained from
:func:`~.tools.results.calculate_mvgd_voltage_current_stats` and
:func:`~.tools.results.calculate_lvgd_voltage_current_stats`.

If a large number of grid districts is involved consider to parallelize the
execution by

.. code-block:: python

    mv_stats,
     lvgd_stat
     mv_nodes,
     mv_edges,
     lv_nodes,
     lv_edges = parallel_running_stats(
        districts_list = mv_grid_districts,
        n_of_processes = n_of_processes,
        n_of_districts = n_of_districts,
        source = 'pkl',
        mode = '')

Data is read from file and returned in six tables.

Furthermore, the function :func:`~.core.Network.to_dataframe()` allows to get
tabular information about nodes and edges of the grid topology representing
graph.

.. code-block:: python

    nodes, edges = network.to_dataframe()


Compare data versions
---------------------

Data generated by different versions of Ding0 or different input data can be
easily compared. Load datasets designated for comparison and pass to
:func:`~.tools.results.dataframe_equal`.

.. code-block:: python

    network_a = load_nd_from_pickle(filename='filename_a.pkl')
    network_b = load_nd_from_pickle(filename='filename_b.pkl')

    passed, msg = dataframe_equal(network_a, network_b)


Explanation of key figures
--------------------------

========= ======================================= ====
Parameter Description                             Unit
========= ======================================= ====
km_cable  Cumulative length of underground cables km
========= ======================================= ====